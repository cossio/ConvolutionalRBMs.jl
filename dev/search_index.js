var documenterSearchIndex = {"docs":
[{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"EditURL = \"https://github.com/cossio/ConvolutionalRBMs.jl/blob/master/docs/src/literate/MNIST.jl\"","category":"page"},{"location":"literate/MNIST/#MNIST","page":"MNIST","title":"MNIST","text":"","category":"section"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"We begin by importing the required packages. We load MNIST via the MLDatasets.jl package.","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"import Makie\nimport CairoMakie\nimport MLDatasets\nimport Flux\nimport RestrictedBoltzmannMachines as RBMs\nimport ConvolutionalRBMs as ConvRBMs\nusing Statistics: mean\nusing ValueHistories: MVHistory\nusing Random: bitrand\nnothing #hide","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Useful function to plot MNIST digits.","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"\"\"\"\n    imggrid(A)\n\nGiven a four dimensional tensor `A` of size `(width, height, ncols, nrows)`\ncontaining `width x height` images in a grid of `nrows x ncols`, this returns\na matrix of size `(width * ncols, height * nrows)`, that can be plotted in a heatmap\nto display all images.\n\"\"\"\nfunction imggrid(A::AbstractArray{<:Any,4})\n    return reshape(permutedims(A, (1,3,2,4)), size(A,1)*size(A,3), size(A,2)*size(A,4))\nend","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Load MNIST dataset.","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Float = Float32\ntrain_x, train_y = MLDatasets.MNIST.traindata()\ntests_x, tests_y = MLDatasets.MNIST.testdata()\ntrain_x = Array{Float}(train_x[:, :, train_y .== 8] .≥ 0.5)\ntests_x = Array{Float}(tests_x[:, :, tests_y .== 8] .≥ 0.5)\ntrain_y = train_y[train_y .== 8]\ntests_y = tests_y[tests_y .== 8]\ntrain_nsamples = length(train_y)\ntests_nsamples = length(tests_y)\n(train_nsamples, tests_nsamples)","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Reshape for convolutional input","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"train_x = reshape(train_x, 1, 28, 28, :) # channel dims, input dims, batch dims\ntests_x = reshape(tests_x, 1, 28, 28, :)\nnothing #hide","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Initialize the convolutional RBM.","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"rbm = ConvRBMs.BinaryConvRBM(Float, 1, 50, (5,5))\nRBMs.initialize!(rbm, train_x)\nnothing #hide","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Train","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"batchsize = 128\nvm = bitrand(1, 28, 28, batchsize) # Initialize fantasy chains\nhistory = RBMs.pcd!(rbm, train_x; epochs=100, vm, batchsize)\nnothing #hide","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Now let's generate some random RBM samples.","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"nrows, ncols = 10, 15\n@time fantasy_x = RBMs.sample_v_from_v(rbm, bitrand(1,28,28,nrows*ncols); steps=10000)\nnothing #hide","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Plot the resulting samples.","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"fig = Makie.Figure(resolution=(40ncols, 40nrows))\nax = Makie.Axis(fig[1,1], yreversed=true)\nMakie.image!(ax, imggrid(reshape(fantasy_x, 28, 28, ncols, nrows)), colorrange=(1,0))\nMakie.hidedecorations!(ax)\nMakie.hidespines!(ax)\nfig","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"This page was generated using Literate.jl.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [ConvolutionalRBMs, ConvolutionalRBMs.HankelTensors]","category":"page"},{"location":"reference/#ConvolutionalRBMs.BinaryConvRBM-Tuple{AbstractArray, AbstractArray, AbstractArray}","page":"Reference","title":"ConvolutionalRBMs.BinaryConvRBM","text":"BinaryConvRBM(visible_fields, hidden_fields, w)\n\nConvolutional RBM with binary visible and hidden units, with fields a and b and weights w.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ConvolutionalRBMs.BinaryConvRBM-Union{Tuple{T}, Tuple{Type{T}, Union{Int64, Tuple{Vararg{Int64, N}} where N}, Union{Int64, Tuple{Vararg{Int64, N}} where N}, Union{Int64, Tuple{Vararg{Int64, N}} where N}}} where T","page":"Reference","title":"ConvolutionalRBMs.BinaryConvRBM","text":"BinaryConvRBM(visible_size, hidden_size, kernel_size)\nBinaryConvRBM(T, visible_size, hidden_size, kernel_size)\n\nConvolutional binary RBM with given dimensions, and parameters initialized to zero of type T (= Float64 by default).\n\n\n\n\n\n","category":"method"},{"location":"reference/#ConvolutionalRBMs.conv_v2h-Union{Tuple{N}, Tuple{AbstractArray{T, N} where T, AbstractArray{T, N} where T}} where N","page":"Reference","title":"ConvolutionalRBMs.conv_v2h","text":"conv_v2h(w, v)\n\nInternal function used to compute inputs from a visible configurations v to the hidden layer, where w are the convolutional RBM weights.\n\nI_mu^k_1dotsk_nb = sum_cj_1dotsj_n w_cj_1dotsj_nmu v_cj_1+k_1-1dotsj_n+k_n-1b\n\nAssumes that:\n\nw is of size (C,J₁,...,Jₙ,M)\nv is of size (C,N₁,...,Nₙ,B)\n\nHere C is the flattened channel dimension, M is the number of hidden units and B is the batch size. Therefore the hidden and batch dimensions must be flattened before calling conv_v2h. The output I is of size (M, N₁ - J₁ + 1, ..., Nₙ - Jₙ + 1, B).\n\nwarning: Warning\nThis is an internal function and is not part of the public API.\n\nwarning: Warning\nOnly works for n = 1, 2, 3 due to a technical limitations.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ConvolutionalRBMs.hsizes-Tuple{ConvolutionalRBMs.ConvRBM, AbstractArray}","page":"Reference","title":"ConvolutionalRBMs.hsizes","text":"hsizes(convrbm, h) -> (hidden_size, output_size, batch_size)\n\nReturns a (named) tuple decomposition of the size of h, such that:\n\nsize(h) == (hidden_size..., output_size..., batch_size...)\n\nThrows an error if h is not consistent with this size.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ConvolutionalRBMs.input_size-Tuple{ConvolutionalRBMs.ConvRBM, AbstractArray}","page":"Reference","title":"ConvolutionalRBMs.input_size","text":"input_size(convrbm, h)\n\nInput size of the visible configuration corresponding to h.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ConvolutionalRBMs.output_size-Tuple{ConvolutionalRBMs.ConvRBM, AbstractArray}","page":"Reference","title":"ConvolutionalRBMs.output_size","text":"output_size(convrbm, v)\n\nOutput size of the hidden configuration corresponding to v.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ConvolutionalRBMs.parts-Tuple{ConvolutionalRBMs.DenseConvRBM}","page":"Reference","title":"ConvolutionalRBMs.parts","text":"parts(denseconvrbm)\n\nExtracts the dense and convolutional parts of a DenseConvRBM.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ConvolutionalRBMs.reshape_maybe-Tuple{Number, Tuple{}}","page":"Reference","title":"ConvolutionalRBMs.reshape_maybe","text":"reshape_maybe(x, shape)\n\nLike reshape(x, shape), except that zero-dimensional outputs are returned as scalars.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ConvolutionalRBMs.vsizes-Tuple{ConvolutionalRBMs.ConvRBM, AbstractArray}","page":"Reference","title":"ConvolutionalRBMs.vsizes","text":"vsizes(convrbm, v) -> (channel_size, input_size, batch_size)\n\nReturns a (named) tuple decomposition of the size of v, such that:\n\nsize(v) == (channel_size..., input_size..., batch_size...)\n\nThrows an error if v is not consistent with this size.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ConvolutionalRBMs.HankelTensors.Hankel-Union{Tuple{K}, Tuple{C}, Tuple{AbstractArray, Tuple{Vararg{Int64, C}}, Tuple{Vararg{Int64, K}}}} where {C, K}","page":"Reference","title":"ConvolutionalRBMs.HankelTensors.Hankel","text":"Hankel(image, kernel_size, channel_size)\n\nConstructs a Hankel array A from the underlying image data, such that:\n\nA[c,j,k,b] = image[c,j+k-1,b]\n\nwhere c,j,k,b are multi-indices for the channel, kernel, image, and batch dimensions. So j is the kernel entry, and k the kernel position in the image.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ConvolutionalRBMs.HankelTensors.hankel-Union{Tuple{K}, Tuple{C}, Tuple{AbstractArray, Tuple{Vararg{Int64, C}}, Tuple{Vararg{Int64, K}}}} where {C, K}","page":"Reference","title":"ConvolutionalRBMs.HankelTensors.hankel","text":"hankel(v, cdims, ksz)\n\nCreates a Hankel array from v with channel dimensions cdims and kernel size ksz. The returned array A satisfies:\n\nA_ijkn = v_ij+k-1n\n\nwhere i,j,k,n are multi-indices, with i traversing channels and j traversing the kernel. ```\n\n\n\n\n\n","category":"method"},{"location":"#ConvolutionalRBMs.jl-Documentation","page":"Home","title":"ConvolutionalRBMs.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package to train and simulate convolutional Restricted Boltzmann Machines. The package is not registered. Install with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/cossio/ConvolutionalRBMs.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package doesn't export any symbols.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Most of the functions have a helpful docstring. See Reference section.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See also the Examples listed on the menu on the left side bar.","category":"page"},{"location":"#Related","page":"Home","title":"Related","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See also https://github.com/cossio/RestrictedBoltzmannMachines.jl.","category":"page"}]
}
